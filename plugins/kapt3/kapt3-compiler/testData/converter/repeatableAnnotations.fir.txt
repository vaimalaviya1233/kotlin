@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoArray {

    public abstract int x();

    public abstract java.lang.String[] a();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoBoolean {

    public abstract int x();

    public abstract boolean bool();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoChar {

    public abstract int x();

    public abstract char chr();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoClass {

    public abstract int x();

    public abstract java.lang.Class<Color> c();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoDouble {

    public abstract int x();

    public abstract double dbl();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoEnum {

    public abstract int x();

    public abstract Color c();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoFloat {

    public abstract int x();

    public abstract float flt();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoInt {

    public abstract int x();

    public abstract int i();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoIntArray {

    public abstract int x();

    public abstract int[] b();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoLong {

    public abstract int x();

    public abstract long l();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoLongArray {

    public abstract int x();

    public abstract long[] b();
}

////////////////////


@kotlin.Metadata()
@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
public abstract @interface AnnoString {

    public abstract int x();

    public abstract java.lang.String s();
}

////////////////////


@kotlin.Metadata()
public enum Color {
    /*public static final*/ BLACK /* = new Color() */;

    Color() {
    }

    @org.jetbrains.annotations.NotNull()
    public static kotlin.enums.EnumEntries<Color> getEntries() {
        return null;
    }
}

////////////////////


@kotlin.Metadata()
public final class Test {
    @org.jetbrains.annotations.NotNull()
    private final java.lang.String value = "";

    public Test() {
        super();
    }

    @org.jetbrains.annotations.NotNull()
    public final java.lang.String getValue() {
        return null;
    }

    @java.lang.Deprecated()
    @lib.Anno(value = "3", construct = {"C"})
    @lib.Anno(value = "2", construct = {"A", "B"})
    @lib.Anno(value = "1")
    public static void getValue$annotations() {
    }
}

////////////////////


@kotlin.Metadata()
@AnnoClass(x = 100, c = Color.class)
@AnnoArray(x = 100, a = {"A", "B"})
@AnnoLongArray(x = 100, b = {1L, 3L})
@AnnoIntArray(x = 100, b = {1, 2, 3})
@AnnoString(x = 100, s = "AAA")
@AnnoDouble(x = 100, dbl = 4.0)
@AnnoFloat(x = 100, flt = 1.0F)
@AnnoInt(x = 100, i = 5)
@AnnoBoolean(x = 100, bool = false)
@AnnoChar(x = 100, chr = 'c')
public final class Test2 {

    public Test2() {
        super();
    }
}

////////////////////

package lib;

public @interface Anno {

    String[] construct() default {};

    String value();
}

////////////////////

package lib;

public class R {

    public R() {
        super();
    }

    public static class id {

        public id() {
            super();
        }
        public static final int textView = 100;
    }
}
